---
- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Open required ports
  community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  with_items:
    - { port: 3478, proto: udp }
    - { port: 5514, proto: tcp }
    - { port: 8080, proto: tcp }
    - { port: 8443, proto: tcp }
    - { port: 8880, proto: tcp }
    - { port: 8843, proto: tcp }
    - { port: 6789, proto: tcp }
    - { port: 27117, proto: tcp }
    - { port: 5656:5699, proto: udp }
    - { port: 10001, proto: udp }
    - { port: 1900, proto: udp }

- name: Install gnupg-agent
  ansible.builtin.apt:
    name: gnupg-agent
    state: present

- name: Install pip3
  ansible.builtin.apt:
    name: python3-pip
    state: present

- name: Install pyOpenSSL
  ansible.builtin.pip:
    name: pyOpenSSL

- name: Add MongoDB Apt signing key
  ansible.builtin.apt_key:
    id: 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
    url: https://www.mongodb.org/static/pgp/server-3.6.asc
    state: present
  retries: 3
  delay: 3

- name: Add MongoDB Apt repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] http://repo.mongodb.org/apt/{{ ansible_distribution|lower }} xenial/mongodb-org/{{ unifi_mongodb_repo_version }} multiverse"
    state: present
    filename: mongodb-org

- name: Install libssl1.0.0
  ansible.builtin.apt:
    deb: http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu5.6_amd64.deb

- name: Install openjdk-8-jre
  ansible.builtin.apt:
    name: openjdk-8-jre-headless
    update_cache: yes
    state: present

- name: Install mongodb-org
  ansible.builtin.apt:
    pkg:
      - "mongodb-org{% if unifi_mongodb_version is defined %}={{ unifi_mongodb_version }}{% endif %}"
      - "mongodb-org-server{% if unifi_mongodb_version is defined %}={{ unifi_mongodb_version }}{% endif %}"
      - "mongodb-org-shell{% if unifi_mongodb_version is defined %}={{ unifi_mongodb_version }}{% endif %}"
      - "mongodb-org-mongos{% if unifi_mongodb_version is defined %}={{ unifi_mongodb_version }}{% endif %}"
      - "mongodb-org-tools{% if unifi_mongodb_version is defined %}={{ unifi_mongodb_version }}{% endif %}"
    update_cache: yes
    state: "{{ unifi_mongodb_force_install }}"

- name: Install unifi
  ansible.builtin.apt:
    deb: 'https://dl.ui.com/unifi/{{ unifi_version }}/unifi_sysvinit_all.deb'
  when: "'unifi' not in ansible_facts.packages or unifi_force_install"
  notify: restart unifi

- name: Configure Unifi
  ansible.builtin.lineinfile:
    dest: "/var/lib/unifi/system.properties"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
    - { regexp: '^(# )?unifi.https.hsts=', line: 'unifi.https.hsts=true' }
    - { regexp: '^(# )?unifi.https.ciphers=', line: 'unifi.https.ciphers=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256' }
    - { regexp: '^(# )?unifi.https.sslEnabledProtocols=', line: 'unifi.https.sslEnabledProtocols=TLSv2' }
    - { regexp: '^(# )?unifi.https.hsts.max_age=', line: 'unifi.https.hsts.max_age=31536000' }
    - { regexp: '^(# )?unifi.https.hsts.preload=', line: 'unifi.https.hsts.preload=true' }
    - { regexp: '^(# )?unifi.https.hsts.subdomain=', line: 'unifi.https.hsts.subdomain=true' }
  notify: restart unifi

- name: Copy certificate key to remote location
  ansible.builtin.copy:
    src: "{{ unifi_local_path_certificate_key }}"
    dest: /var/lib/unifi/client.pem

- name: Get certificate content
  ansible.builtin.set_fact:
    unifi_cert_content: "{{ lookup('file', unifi_local_path_certificate) }}"

- name: Find root certificate
  community.crypto.certificate_complete_chain:
    input_chain: "{{ unifi_cert_content }}"
    root_certificates: "{{ unifi_local_absolute_path_ca_certificate }}"
  delegate_to: localhost
  register: fullchain

- name: Save fullchain certificate
  ansible.builtin.copy:
    content: "{{ ''.join(fullchain.complete_chain) }}"
    dest: /var/lib/unifi/fullchain.crt

- name: Generate PKCS#12 file
  community.crypto.openssl_pkcs12:
    action: export
    path: /var/lib/unifi/cert.p12
    privatekey_path: /var/lib/unifi/client.pem
    certificate_path: /var/lib/unifi/fullchain.crt
    friendly_name: unifi
    passphrase: "{{ unifi_pkcs12_password }}"
    state: present

- name: Import SSL certificate to unifi keystore
  community.general.java_cert:
    pkcs12_path: /var/lib/unifi/cert.p12
    pkcs12_password: "{{ unifi_pkcs12_password }}"
    pkcs12_alias: unifi
    keystore_path: /var/lib/unifi/keystore
    keystore_pass: aircontrolenterprise
    keystore_create: yes
    state: present
  notify: restart unifi