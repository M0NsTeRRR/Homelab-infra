---
- name: Open required ports
  ufw:
    rule: allow
    port: "53000"
    proto: udp

- name: Add pdns group
  group:
    name: pdns
    state: present

- name: Add pdns user
  user:
    name: pdns
    create_home: false
    shell: /usr/sbin/nologin
    group: pdns
    append: yes

- name: Install required packages by PowerDNS
  apt:
    pkg: 
      - apt-transport-https
      - gnupg-agent
    state: present

- name: Add PowerDNS Apt signing key
  apt_key:
    id: "CBC8B383"
    url: "https://repo.powerdns.com/CBC8B383-pub.asc"
    state: present
  retries: 3
  delay: 3

- name: Add PowerDNS Apt repository
  apt_repository:
    repo: "deb [arch=amd64] http://repo.powerdns.com/{{ ansible_distribution|lower }} {{ ansible_distribution_release }}-auth-master main"
    state: present
    filename: pdns-auth

- name: Configure apt preferences
  template:
    src: apt-preferences.j2
    dest: /etc/apt/preferences.d/pdns
    owner: root
    group: root
    mode: 0644

- name: Disable and stop systemd-resolved
  systemd:
    name: systemd-resolved
    state: stopped
    enabled: false

- name: Install PowerDNS
  apt:
    pkg: 
      - pdns-server
      - sqlite3
      - pdns-backend-sqlite3
    state: present

- name: Fix perms on PowerDNS configuration
  file:
    name: "/etc/powerdns/pdns.conf"
    owner: "root"
    group: "pdns"
    mode: 0640
    state: file

- name: Ensure that the directories containing the PowerDNS SQLite databases exist
  file:
    name: "/var/lib/powerdns"
    owner: "pdns"
    group: "pdns"
    mode: 0755
    state: directory

- name: Check if database exist
  stat:
    path: "/var/lib/powerdns/db.sqlite"
  register: pdns_db

- name: Create the PowerDNS SQLite databases
  shell: "sqlite3 /var/lib/powerdns/db.sqlite < /usr/share/doc/pdns-backend-sqlite3/schema.sqlite3.sql"
  when: not pdns_db.stat.exists
  notify: restart pdns

- name: Fix perms on PowerDNS SQLite databases
  file:
    name: "/var/lib/powerdns/db.sqlite"
    owner: "pdns"
    group: "pdns"
    mode: 0640
    state: file

- name: Configure PowerDNS
  lineinfile:
    dest: "/etc/powerdns/pdns.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
      - { regexp: '^(# )?setgid=', line: 'setgid=pdns' }
      - { regexp: '^(# )?setuid=', line: 'setuid=pdns' }
      - { regexp: '^(# )?local-address=', line: 'local-address=0.0.0.0, ::' }
      - { regexp: '^(# )?local-port=', line: 'local-port=53000' }
      - { regexp: '^(# )?launch=', line: 'launch=gsqlite3' }
      - { regexp: '^(# )?gsqlite3-database=', line: 'gsqlite3-database=/var/lib/powerdns/db.sqlite' }
      - { regexp: '^(# )?gsqlite3-dnssec=', line: 'gsqlite3-dnssec=yes' }
      - { regexp: '^(# )?api=', line: 'api=yes' }
      - { regexp: '^(# )?api-key=', line: 'api-key={{ pdns_api_key }}' }
      - { regexp: '^(# )?webserver-address=', line: 'webserver-address=127.0.0.1' }
      - { regexp: '^(# )?webserver-port=', line: 'webserver-port=8081' }
      - { regexp: '^(# )?webserver-allow-from=', line: 'webserver-allow-from=127.0.0.1' }
  notify: restart pdns

- name: Configure master
  lineinfile:
    dest: "/etc/powerdns/pdns.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
      - { regexp: '^(# )?master=', line: 'master=yes' }
      - { regexp: '^(# )?superslave=', line: 'superslave=no' }
      - { regexp: '^(# )?slave=', line: 'slave=no' }
  when: inventory_hostname == play_hosts[0]
  notify: restart pdns

- name: Configure slave
  lineinfile:
    dest: "/etc/powerdns/pdns.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
      - { regexp: '^(# )?master=', line: 'master=no' }
      - { regexp: '^(# )?superslave=', line: 'superslave=yes' }
      - { regexp: '^(# )?slave=', line: 'slave=yes' }
  when: inventory_hostname != play_hosts[0]
  notify: restart pdns

- meta: flush_handlers