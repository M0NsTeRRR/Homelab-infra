server {

  listen {{ item.ssl_port }} ssl http2;
  listen [::]:{{ item.ssl_port }} ssl http2;

  server_name {{ item.server_name }};

  ssl_certificate /etc/ssl/certs/{{ item.name }}.crt;
  ssl_certificate_key /etc/ssl/certs/{{ item.name }}.pem;
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
  ssl_session_tickets off;

  ssl_dhparam /etc/nginx/dhparam.pem;

  # intermediate configuration
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  # HSTS
  add_header Strict-Transport-Security "max-age=63072000" always;

  # OCSP stapling
  ssl_stapling on;
  ssl_stapling_verify on;

  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
  {% if item.enable_content_security %}add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;{% endif %}
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;


  access_log /var/log/nginx/{{ item.name }}.access.log;
  error_log /var/log/nginx/{{ item.name }}.error.log warn;

  {% for location in item.locations %}
  location {{ location.location }} {

    {% if location.proxy_pass is defined %}
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;

    proxy_pass              {{ location.proxy_pass }};
    proxy_read_timeout      90;
    {% endif %}

    {% if location.alias is defined %}
    alias {{ location.alias }};
    autoindex off;
    {% endif %}

    {% if location.proxy_headers is defined %}
    {% for headerName, headerValue in location.proxy_headers.items() %}
    proxy_set_header        {{ headerName }} {{ headerValue }};
    {% endfor %}
    {% endif %}
  }
  {% endfor %}
}

{% if item.http_redirection %}
server {
  listen 80;
  listen [::]:80;

  server_name {{ item.server_name }};

  location / {
    return 301 https://$server_name$request_uri;
  }
}
{% endif %}